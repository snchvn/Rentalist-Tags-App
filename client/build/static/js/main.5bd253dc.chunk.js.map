{"version":3,"sources":["List.js","ListFunctions.js","App.js","serviceWorker.js","index.js"],"names":["List","onChange","e","setState","target","name","value","getAll","axios","get","headers","then","res","data","title","items","console","log","state","onSubmit","preventDefault","post","response","onUpdate","id","put","editDisabled","onEdit","itemid","forEach","item","index","onDelete","val","delete","catch","error","filter","splice","arttitle","artbody","bind","this","className","htmlFor","type","onClick","map","key","href","disabled","Component","App","props","term","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5bd253dc.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { getList, addItem, deleteItem, updateItem } from './ListFunctions'\r\n\r\nclass List extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            id: '',\r\n            title: '',\r\n            arttitle: '',\r\n            artbody: '',\r\n            editDisabled: false,\r\n            items: []\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.onChange = this.onChange.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAll()\r\n    }\r\n\r\n    onChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    getAll = () => {\r\n        getList().then(data => {\r\n            this.setState(\r\n                {\r\n                    title: '',\r\n                    items: [...data]\r\n                },\r\n                () => {\r\n                    console.log(this.state.items)\r\n                }\r\n            )\r\n        })\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault()\r\n        addItem(this.state.title).then(() => {\r\n            this.getAll()\r\n        })\r\n        this.setState({\r\n            title: ''\r\n        })\r\n    }\r\n\r\n    onUpdate = e => {\r\n        e.preventDefault()\r\n        updateItem(this.state.title, this.state.id).then(() => {\r\n            this.getAll()\r\n        })\r\n        this.setState({\r\n            editDisabled: ''\r\n        })\r\n    }\r\n\r\n    onEdit = (itemid, e) => {\r\n        e.preventDefault()\r\n\r\n        var data = [...this.state.items]\r\n        data.forEach((item, index) => {\r\n            if (item.id === itemid) {\r\n                this.setState({\r\n                    id: item.id,\r\n                    title: item.title,\r\n                    editDisabled: true\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    onDelete = (val, e) => {\r\n        e.preventDefault()\r\n        deleteItem(val)\r\n\r\n        var data = [...this.state.items]\r\n        data.filter(function(item, index) {\r\n            if (item.id === val) {\r\n                data.splice(index, 1)\r\n            }\r\n            return true\r\n        })\r\n        this.setState({ items: [...data] })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-md-12\">\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"title\">Title</label>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-12\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"title\"\r\n                                    name=\"title\"\r\n                                    value={this.state.title || ''}\r\n                                    onChange={this.onChange.bind(this)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {!this.state.editDisabled ? (\r\n                        <button\r\n                            type=\"submit\"\r\n                            onClick={this.onSubmit.bind(this)}\r\n                            className=\"btn btn-success btn-block\"\r\n                        >\r\n                            Submit\r\n                        </button>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                    {this.state.editDisabled ? (\r\n                        <button\r\n                            type=\"submit\"\r\n                            onClick={this.onUpdate.bind(this)}\r\n                            className=\"btn btn-primary btn-block\"\r\n                        >\r\n                            Update\r\n                        </button>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </form>\r\n                <table className=\"table\">\r\n                    <tbody>\r\n                        {this.state.items.map((item, index) => (\r\n                            <tr key={index}>\r\n                                <td className=\"text-left\">{item.title}</td>\r\n                                <td className=\"text-right\">\r\n                                    <button\r\n                                        href=\"\"\r\n                                        className=\"btn btn-info mr-1\"\r\n                                        disabled={this.state.editDisabled}\r\n                                        onClick={this.onEdit.bind(\r\n                                            this,\r\n                                            item.id\r\n                                        )}\r\n                                    >\r\n                                        Edit\r\n                                    </button>\r\n                                    <button\r\n                                        href=\"\"\r\n                                        className=\"btn btn-danger\"\r\n                                        disabled={this.state.editDisabled}\r\n                                        onClick={this.onDelete.bind(\r\n                                            this,\r\n                                            item.id\r\n                                        )}\r\n                                    >\r\n                                        Delete\r\n                                    </button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List\r\n","import axios from 'axios'\r\n\r\nexport const getList = () => {\r\n    return axios\r\n        .get('http://localhost:8000/api/tags', {\r\n            headers: { 'Content-Type': 'application/json' }\r\n        })\r\n        .then(res => {\r\n            return res.data\r\n        })\r\n}\r\n\r\nexport const addItem = title => {\r\n    return axios\r\n        .post(\r\n            'http://localhost:8000/api/tags',\r\n            {\r\n                title: title\r\n            },\r\n            {\r\n                headers: { 'Content-Type': 'application/json' }\r\n            }\r\n        )\r\n        .then(function(response) {\r\n            console.log(response)\r\n        })\r\n}\r\n\r\nexport const deleteItem = id => {\r\n    axios\r\n        .delete(`http://localhost:8000/api/tags/${id}`, {\r\n            headers: { 'Content-Type': 'application/json' }\r\n        })\r\n        .then(function(response) {\r\n            console.log(response)\r\n        })\r\n        .catch(function(error) {\r\n            console.log(error)\r\n        })\r\n}\r\n\r\nexport const updateItem = (title, id) => {\r\n    return axios\r\n        .put(\r\n            `http://localhost:8000/api/tags/${id}`,\r\n            {\r\n                title: title\r\n            },\r\n            {\r\n                headers: { 'Content-Type': 'application/json' }\r\n            }\r\n        )\r\n        .then(function(response) {\r\n            console.log(response)\r\n        })\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport List from './List'\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            term: '',\n            items: []\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-6 mx-auto\">\n                        <h1 className=\"text-center\">Rentalist Property Tags Manager</h1>\n                        <List />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}